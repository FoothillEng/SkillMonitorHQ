generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum StudentLevel {
  BEGINNER
  INTERMEDIATE
  ADVANCED
}

enum Role {
  STUDENT
  ADMIN
  TEACHER
}

model User {
  id               String        @id @default(uuid())
  studentId        Int           @unique
  firstName        String
  lastName         String
  avatar           String        @default("https://res.cloudinary.com/dxj8g5osv/image/upload/v1695244850/yvod98i9tspx7fpwxbm5.png")
  level            StudentLevel  @default(BEGINNER)
  lifetimeDuration Int           @default(1)
  role             Role          @default(STUDENT)
  machines         UserMachine[]
  sessions         Session[]
  UserLogin        UserLogin[]
}

model Machine {
  id        Int           @id @default(autoincrement())
  uuid      String        @unique @default(uuid())
  name      String        @unique
  users     UserMachine[]
  UserLogin UserLogin[]

  @@unique([id, uuid])
}

model UserMachine {
  id                    Int       @id @default(autoincrement())
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId                String
  machine               Machine   @relation(fields: [machineId, machineUUID], references: [id, uuid], onDelete: Cascade)
  machineId             Int // do i rlly need both of these linked?
  machineUUID           String
  duration              Int       @default(1) // seconds, computed on session end
  usageCount            Int       @default(0)
  cumulativeRatingSum   Int       @default(0)
  cumulativeRatingCount Int       @default(0)
  averageRating         Float     @default(5)
  apprentice            Boolean   @default(true)
  sessions              Session[]

  @@unique([userId, machineId])
}

model Session {
  id              String      @id @default(uuid())
  startTime       DateTime    @default(now())
  endTime         DateTime?
  duration        Int? //   seconds, computed on session end
  userMachine     UserMachine @relation(fields: [userMachineId], references: [id])
  userMachineId   Int
  User            User        @relation(fields: [userId], references: [id])
  userId          String
  apprentice1UMID Int?
  apprentice2UMID Int?
  apprentice3UMID Int?
}

model UserLogin {
  id             Int       @id @default(autoincrement())
  user           User      @relation(fields: [userId], references: [id])
  userId         String
  machine        Machine   @relation(fields: [machineId], references: [id])
  machineId      Int
  loginTime      DateTime  @default(now())
  logoutTime     DateTime? // use this on logout to remove logins that are shorter than 5 minutes???? talk to johnson
  isLoginSession Boolean   @default(false)
  rated          Boolean   @default(false)
}

model StudentBody {
  id        Int    @id @default(autoincrement())
  studentId Int
  firstName String
  lastName  String
}
